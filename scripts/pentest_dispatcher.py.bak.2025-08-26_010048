#!/usr/bin/env python3
import argparse, json, subprocess, os, sys

def run_cmd(cmd, cwd=None):
    print("[CMD]", " ".join(cmd))
    try:
        subprocess.run(cmd, cwd=cwd, check=True)
    except subprocess.CalledProcessError as e:
        print(f"[ERR] Command failed: {e}")
        sys.exit(1)

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("-q","--queue", required=True, help="pentest_queue.jsonl")
    ap.add_argument("-o","--outdir", required=True, help="job output dir")
    ap.add_argument("--nuclei", required=True, help="path to nuclei binary")
    ap.add_argument("--templates", required=True, help="path to nuclei-templates")
    ap.add_argument("--rate", type=int, default=120)
    ap.add_argument("--concurrency", type=int, default=20)
    ap.add_argument("--timeout", type=int, default=15)
    args = ap.parse_args()

    queue_file = args.queue
    outdir = args.outdir
    raw_dir = os.path.join(outdir, "pentest_raw")
    os.makedirs(raw_dir, exist_ok=True)

    nuclei_bin = args.nuclei
    templates_dir = args.templates

    # takeover scan
    cmd_takeover = [
        nuclei_bin,
        "-templates", templates_dir,
        "-tags", "takeover",
        "-severity", "critical,high",
        "-rl", str(args.rate),
        "-c", str(args.concurrency),
        "-timeout", str(args.timeout),
        "-retries", "1",
        "-silent", "-no-color",
        "-l", f"{raw_dir}/targets_takeover.txt",
        "-o", f"{raw_dir}/nuclei_takeover.out.txt"
    ]
    run_cmd(cmd_takeover)

    # file-upload scan
    cmd_upload = [
        nuclei_bin,
        "-templates", templates_dir,
        "-tags", "file-upload",
        "-severity", "critical,high",
        "-rl", str(args.rate),
        "-c", str(args.concurrency),
        "-timeout", str(args.timeout),
        "-retries", "1",
        "-silent", "-no-color",
        "-l", f"{raw_dir}/targets_upload.txt",
        "-o", f"{raw_dir}/nuclei_fileupload.out.txt"
    ]
    run_cmd(cmd_upload)

    # ringkasan
    summary_path = os.path.join(outdir, "pentest_summary.txt")
    with open(summary_path, "w") as sf:
        sf.write(f"[takeover] targets -> {raw_dir}/nuclei_takeover.out.txt\n")
        sf.write(f"[file-upload] targets -> {raw_dir}/nuclei_fileupload.out.txt\n")
    print("[OK] summary ->", summary_path)

if __name__ == "__main__":
    main()
