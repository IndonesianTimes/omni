#!/usr/bin/env python3
import argparse, json, subprocess, shlex, time
from pathlib import Path
from datetime import datetime

def run_cmd(cmd, timeout=None):
    p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)
    out, _ = p.communicate(timeout=timeout)
    return p.returncode, out

def ensure_dir(p: Path):
    p.mkdir(parents=True, exist_ok=True)

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("-q","--queue",required=True)
    ap.add_argument("-o","--outdir",required=True)
    ap.add_argument("--nuclei",default="/usr/local/bin/nuclei")
    ap.add_argument("--templates",default="/opt/omni/tools/nuclei-templates")
    ap.add_argument("--rate",type=int,default=150)
    ap.add_argument("--concurrency",type=int,default=30)
    ap.add_argument("--timeout",type=int,default=15)
    args=ap.parse_args()

    qpath=Path(args.queue)
    job_dir=Path(args.outdir)
    ensure_dir(job_dir)
    raw_dir=job_dir/"pentest_raw"; ensure_dir(raw_dir)

    results_path=job_dir/"pentest_results.jsonl"
    summary_path=job_dir/"pentest_summary.txt"

    items=[json.loads(x) for x in qpath.read_text(encoding="utf-8").splitlines() if x.strip()]
    if not items:
        results_path.write_text("",encoding="utf-8")
        summary_path.write_text("No pentest items in queue.\n",encoding="utf-8")
        print("[OK] queue empty, wrote empty results/summary")
        return

    job_id=items[0].get("job_id") or datetime.utcnow().strftime("%Y%m%d_%H%M%S")
    final_rows=[]
    lines_summary=[]

    targets_takeover=[it["target"] for it in items if it["kind"]=="nuclei-takeover"]
    targets_upload=[it["target"] for it in items if it["kind"]=="nuclei-file-upload"]

    # jalankan nuclei jika ada target
    if targets_takeover:
        tf=raw_dir/"targets_takeover.txt"; tf.write_text("\n".join(targets_takeover))
        out_file=raw_dir/"nuclei_takeover.out.txt"
        cmd=f"{args.nuclei} -l {tf} -tags takeovers -severity high,critical -t {args.templates} -o {out_file}"
        rc,out=run_cmd(cmd,timeout=args.timeout*len(targets_takeover))
        final_rows.append({"kind":"nuclei-takeover","status":"ok" if rc==0 else f"exit-{rc}","out_file":str(out_file)})
        lines_summary.append(f"[takeover] {len(targets_takeover)} targets -> {out_file}")

    if targets_upload:
        tf=raw_dir/"targets_upload.txt"; tf.write_text("\n".join(targets_upload))
        out_file=raw_dir/"nuclei_fileupload.out.txt"
        cmd=f"{args.nuclei} -l {tf} -tags file-upload -severity high,critical -t {args.templates} -o {out_file}"
        rc,out=run_cmd(cmd,timeout=args.timeout*len(targets_upload))
        final_rows.append({"kind":"nuclei-file-upload","status":"ok" if rc==0 else f"exit-{rc}","out_file":str(out_file)})
        lines_summary.append(f"[file-upload] {len(targets_upload)} targets -> {out_file}")

    # tulis hasil
    with results_path.open("w",encoding="utf-8") as f:
        for r in final_rows: f.write(json.dumps(r)+"\n")
    with summary_path.open("w",encoding="utf-8") as f:
        for ln in lines_summary: f.write(ln+"\n")

    print(f"[OK] results -> {results_path}")
    print(f"[OK] summary -> {summary_path}")

if __name__=="__main__":
    main()
