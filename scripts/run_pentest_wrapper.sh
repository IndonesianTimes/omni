#!/usr/bin/env bash
set -euo pipefail

# --------- args ----------
INPUT=""
PROFILE="minimal"   # minimal | extended
RL="${RL:-30}"       # rate limit (RPS) default rendah
CONCURRENCY="${CONCURRENCY:-30}"
TIMEOUT="${TIMEOUT:-15}"

while [[ $# -gt 0 ]]; do
  case "$1" in
    --input) INPUT="$2"; shift 2;;
    --profile) PROFILE="$2"; shift 2;;
    --rate) RL="$2"; shift 2;;
    --concurrency) CONCURRENCY="$2"; shift 2;;
    --timeout) TIMEOUT="$2"; shift 2;;
    *) echo "[ERR] unknown arg: $1"; exit 2;;
  esac
done

if [[ -z "${INPUT}" || ! -f "${INPUT}" ]]; then
  echo "[ERR] --input <file> required & must exist"; exit 2
fi

NUCLEI="/usr/local/bin/nuclei"
TPL="/opt/omni/tools/nuclei-templates"

# --------- job dir ----------
JOB_ID="$(date +%y%m%d_%H%M%S)"
JOB_DIR="/opt/omni/jobs/${JOB_ID}"
RAW_DIR="${JOB_DIR}/pentest_raw"
mkdir -p "${RAW_DIR}"
echo "[RUN] JOB_ID=${JOB_ID}"
cp -f "${INPUT}" "${JOB_DIR}/input.txt"

# --------- build targets_* ----------
# Normalisasi: terima domain atau URL; tulis kedua scheme utk upload
awk '
  function trim(s){ sub(/^[ \t\r\n]+/,"",s); sub(/[ \t\r\n]+$/,"",s); return s }
  {
    s=trim($0); if(s=="") next;
    if(s ~ /^https?:\/\//){ u=s }
    else { u="https://" s }
    print u >> ENVIRON["RAW_DIR"]"/targets_upload.txt"
    print u >> ENVIRON["RAW_DIR"]"/targets_takeover.txt"
  }
' "${INPUT}"

# Pastikan file khusus ini selalu ada
: > "${RAW_DIR}/targets_fileupload.txt"   # preferred untuk file-upload
# (biarkan kosong; dispatcher wrapper akan fallback ke targets_upload.txt)

# --------- tags per profile ----------
EXTRA_TAGS=""
case "${PROFILE}" in
  minimal)   EXTRA_TAGS="";;
  extended)  EXTRA_TAGS="rce,cve";;
  full)      EXTRA_TAGS="rce,cve";;  # bisa tambah lainnya nanti
  *) echo "[WARN] unknown profile '${PROFILE}', fallback minimal"; EXTRA_TAGS="";;
esac

# --------- run dispatcher ----------
python3 /opt/omni/scripts/pentest_dispatcher.py \
  -q "${JOB_DIR}/pentest_queue.jsonl" \
  -o "${JOB_DIR}" \
  --nuclei "${NUCLEI}" \
  --templates "${TPL}" \
  --rate "${RL}" --concurrency "${CONCURRENCY}" --timeout "${TIMEOUT}" \
  ${EXTRA_TAGS:+--extra-tags "${EXTRA_TAGS}"}

# --------- ranking (likelihood) ----------
# skor: critical=5, high=3; akumulasi per-host; sorot kelas (takeover,file-upload,rce,cve)
python3 - <<'PY' "${JOB_DIR}"
import os, re, sys, csv
job = sys.argv[1]
raw = os.path.join(job,"pentest_raw")
outs = [f for f in os.listdir(raw) if f.startswith("nuclei_") and f.endswith(".out.txt")]
sev_re = re.compile(r'\b(critical|high)\b', re.I)
url_re = re.compile(r'(?i)\bhttps?://[^ ]+')
host_re = re.compile(r'(?i)https?://([^/ ]+)')

weight = {"critical":5, "high":3}
scores = {}   # host -> dict

def reg(host, klass, sev):
    host = host.lower()
    d = scores.setdefault(host, {"score":0,"critical":0,"high":0,"classes":set()})
    d["classes"].add(klass)
    if sev.lower() in weight:
        d[sev.lower()] += 1
        d["score"] += weight[sev.lower()]

for fn in outs:
    klass = fn.replace("nuclei_","").replace(".out.txt","")
    if klass=="fileupload": klass="file-upload"
    with open(os.path.join(raw,fn),encoding="utf-8",errors="ignore") as f:
        for line in f:
            s=line.strip()
            if not s: continue
            sev = (sev_re.search(s).group(1) if sev_re.search(s) else "high")  # default high if not printed
            url = (url_re.search(s).group(0) if url_re.search(s) else "")
            host = (host_re.search(url).group(1) if url else url or s.split()[0])
            reg(host, klass, sev)

rows = []
for h,d in scores.items():
    rows.append([h,d["score"],d["critical"],d["high"],",".join(sorted(d["classes"]))])
rows.sort(key=lambda x:(-x[1], -x[2], -x[3], x[0]))

out_csv = os.path.join(job,"pentest_ranked.csv")
with open(out_csv,"w",newline="",encoding="utf-8") as g:
    w=csv.writer(g); w.writerow(["host","score","critical","high","classes"])
    w.writerows(rows)
print(f"[OK] ranked -> {out_csv} ({len(rows)} rows)")
PY

echo "[OK] summary -> ${JOB_DIR}/pentest_summary.txt"
echo "[OK] csv -> ${JOB_DIR}/pentest_results.csv"
echo "[OK] ranked -> ${JOB_DIR}/pentest_ranked.csv"

# print quick view
sed -n '1,20p' "${JOB_DIR}/pentest_summary.txt" || true
nl -ba "${JOB_DIR}/pentest_ranked.csv" | sed -n '1,20p' || true
